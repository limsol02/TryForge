<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.web.spring.admin.dao.AdTaskDao">
	<resultMap type = "task" id="taskRst">
		<result column = "task_key" property = "id"/>
		<result column = "task_type" property = "type"/>
	</resultMap>
	
	<select id="schTaskMem" resultType="memberSch" parameterType="memberSch">
		SELECT m.member_key, m.member_name, m.member_email, tm.ROLE, p.title, p.start_date, p.end_date, p.project_key, ta.task_key
		FROM MEMBER m
				 LEFT JOIN TEAM_MEMBER tm ON tm.MEMBER_KEY = m.MEMBER_KEY
				 LEFT JOIN TEAM t ON t.team_key = tm.TEAM_KEY
				 LEFT JOIN PROJECT p ON p.project_key = t.PROJECT_KEY
				 LEFT JOIN task ta ON ta.PROJECT_KEY = p.PROJECT_KEY
		WHERE m.MEMBER_NAME LIKE '%'||''||'%'
		  AND p.title LIKE '%'||''||'%'
		  AND m.MEMBER_ROLE = UPPER('emp')
		  and ta.task_type='project'
		  AND (m.member_key, p.project_key) IN (
			SELECT m.member_key, MAX(p.project_key)
			FROM MEMBER m
					 JOIN TEAM_MEMBER tm ON tm.MEMBER_KEY = m.MEMBER_KEY
					 JOIN TEAM t ON t.team_key = tm.TEAM_KEY
					 JOIN PROJECT p ON p.project_key = t.PROJECT_KEY
					JOIN Task ta on ta.PROJECT_KEY = p.PROJECT_KEY
			WHERE m.MEMBER_NAME LIKE '%'||#{member_name}||'%'
			  AND p.title LIKE '%'||#{title}||'%'
			  AND m.MEMBER_ROLE = UPPER('emp')
			GROUP BY m.member_key
		)
		ORDER BY m.MEMBER_KEY
	</select>
	
	<!-- 업무할당 -->
	<insert id="insertTask" parameterType="task">
		INSERT INTO task 
		(task_key, MEMBER_KEY, PROJECT_KEY, text, START_DATE, END_DATE, DURATION, PROGRESS, TASK_TYPE, STATUS, detail, parent, hide_bar, task_open, confirm, assignor)
		VALUES
		(TASK_SEQ.NEXTVAL, #{member_key}, #{project_key} , #{text},
		 to_DATE(#{start_date},'YYYY-MM-DD'), to_DATE (#{end_date},'YYYY-MM-DD'),
		 FLOOR(to_DATE (#{end_date},'YYYY-MM-DD')-to_DATE(#{start_date},'YYYY-MM-DD')), 0,
		 'task','진행중',#{detail},#{parent},0,1,0,#{assignor})
	</insert>
	<!-- 업무 출력 -->
	<select id="taskList" resultMap="taskRst">
	    SELECT DISTINCT t.*
	    FROM task t
	    WHERE (status = '요청' OR status = '진행중') AND MEMBER_KEY = #{member_key}
	</select>
	<!-- 업무 제목, 상세설명 수정 -->
	<update id="uptTask" parameterType="task">
		UPDATE task SET text = #{text} , detail = #{detail} WHERE task_key = #{id}
	</update>
	<!-- 업무 삭제 -->
	<delete id="delTask" parameterType="int">
		DELETE FROM TASK WHERE task_key = #{id}
	</delete>
	<select id="adRiskList" resultType="risk" parameterType="int">
		SELECT r.*, ta.text, p.TITLE
		FROM risk r
				 LEFT JOIN PROJECT p ON r.PROJECT_KEY = p.PROJECT_KEY
				 LEFT JOIN task ta ON ta.TASK_KEY = r.TASK_KEY
		WHERE p.CREATER = #{creater} order by r.REG_DATE
	</select>
	<select id="riskContactList" resultType="memberSch" parameterType="String">
		SELECT m.*, tm.ROLE  FROM MEMBER m
		  LEFT JOIN TEAM_MEMBER tm ON tm.MEMBER_KEY = m.MEMBER_KEY
		  LEFT JOIN TEAM t ON t.TEAM_KEY = tm.TEAM_KEY
		  LEFT JOIN PROJECT p ON p.PROJECT_KEY = t.PROJECT_KEY
		WHERE p.PROJECT_KEY = #{project_key}
	</select>
	<insert id="insertRiskRes" parameterType="risk_response">
		INSERT INTO RISK_RESPONSE values (RISK_RES_SEQ.nextval, #{risk_key}, #{response_method}, #{contact}, NULL, '발생전', #{strategy} )
	</insert>
	<update id="uptRiskResponse" parameterType="risk_response">
		update RISK_RESPONSE set response_method = #{response_method}, contact = #{contact} where RISK_RESPONSE_KEY= #{risk_response_key}
	</update>
	<!--리스크 미확인, 발생전, 처리중, 처리완료 -->
	<select id="riskNotConTot" resultType="int" parameterType="int">
		SELECT COUNT(*) FROM risk r
		    JOIN project p ON p.PROJECT_KEY = r.PROJECT_KEY
		WHERE p.CREATER = #{creater} AND r.CONFIRM = 0
	</select>
	<select id="riskTot01" resultType="int" parameterType="int">
		SELECT COUNT(*) FROM risk r
			JOIN project p ON p.PROJECT_KEY = r.PROJECT_KEY
			JOIN RISK_RESPONSE rr ON rr.RISK_KEY = r.RISK_KEY
		WHERE p.CREATER = #{creater} AND rr.status = '발생전'
	</select>
	<select id="riskTot02" resultType="int" parameterType="int">
		SELECT COUNT(*) FROM risk r
			 JOIN project p ON p.PROJECT_KEY = r.PROJECT_KEY
			 JOIN RISK_RESPONSE rr ON rr.RISK_KEY = r.RISK_KEY
		WHERE p.CREATER = #{creater} AND rr.status = '처리중'
	</select>
	<select id="riskTot03" resultType="int" parameterType="int">
		SELECT COUNT(*) FROM risk r
			 JOIN project p ON p.PROJECT_KEY = r.PROJECT_KEY
			 JOIN RISK_RESPONSE rr ON rr.RISK_KEY = r.RISK_KEY
		WHERE p.CREATER = #{creater} AND rr.status = '처리완료'
	</select>

</mapper>